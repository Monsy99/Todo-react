{"version":3,"sources":["features/tasks/Form/styledForm.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TaskList/styledTasks.js","features/tasks/TaskList/index.js","features/tasks/Buttons/styledButtons.js","features/tasks/Buttons/index.js","common/Group/styledGroup.js","common/Group/index.js","common/Header/styledHeader.js","common/Header/index.js","common/Wrapper/styledWrapper.js","common/Wrapper/index.js","features/tasks/Tasks.js","App.js","serviceWorker.js","store.js","index.js"],"names":["StyledForm","styled","form","StyledInput","input","Button","button","tasksSlice","createSlice","name","initialState","tasks","content","done","id","hideDone","reducers","addTask","payload","push","toggleHideDone","state","setAllDone","toggleTaskDone","index","findIndex","task","removeTask","splice","actions","selectTasks","Form","useState","inputContent","setInputContent","dispatch","useDispatch","onSubmit","event","preventDefault","trim","nanoid","onFormSubmit","value","autoFocus","type","placeholder","onChange","target","TasksList","div","Task","li","hidden","css","DoneButton","TaskContent","p","DeleteButton","TaskList","useSelector","map","key","onClick","ButtonsContainer","Buttons","length","disabled","every","StyledGroup","Wrapper","SubHeader","h2","Group","props","title","additionalElements","children","StyledHeader","h1","Header","StyledWrapper","Tasks","App","Boolean","window","location","hostname","match","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mjCAEA,IAAMA,EAAaC,IAAOC,KAAV,KAQVC,EAAcF,IAAOG,MAAV,KAaXC,EAASJ,IAAOK,OAAV,K,QCrBNC,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAAc,CACZC,MAAO,CACL,CACEC,QAAS,OACTC,MAAM,EACNC,GAAI,IAGRC,UAAU,GAEZC,SAAU,CACRC,QAAS,cAA6B,IAA1BN,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QACrBP,EAAMQ,KAAKD,IAEbE,eAAgB,SAACC,GACfA,EAAMN,UAAYM,EAAMN,UAE1BO,WAAY,YAAgB,IAAD,EAAZX,EAAY,EAAZA,MAAY,cACNA,GADM,IACzB,2BAA0B,SACnBE,MAAO,GAFW,gCAK3BU,eAAgB,cAA6B,IAA1BZ,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QACtBM,EAAQb,EAAMc,WAAU,SAACC,GAAD,OAAUA,EAAKZ,KAAOI,KACpDP,EAAMa,GAAOX,MAAQF,EAAMa,GAAOX,MAEpCc,WAAY,cAA6B,IAA1BhB,EAAyB,EAAzBA,MAAWO,EAAc,EAAdA,QAClBM,EAAQb,EAAMc,WAAU,SAACC,GAAD,OAAUA,EAAKZ,KAAOI,KACpDP,EAAMiB,OAAOJ,EAAO,O,EAWtBjB,EAAWsB,QALbZ,E,EAAAA,QACAG,E,EAAAA,eACAE,E,EAAAA,WACAC,E,EAAAA,eACAI,E,EAAAA,WAEWG,EAAc,SAACT,GAAD,OAAWA,EAAMV,OAC7BJ,IAAf,QCLewB,EAlCF,WAAO,IAAD,EACuBC,mBAAS,IADhC,mBACVC,EADU,KACIC,EADJ,KAGXC,EAAWC,cAiBjB,OACE,kBAACpC,EAAD,CAAYqC,SAAU,SAACC,GAAD,OAhBH,SAACA,GACpBA,EAAMC,iBACsB,KAAxBN,EAAaO,SAGjBL,EACElB,EAAQ,CACNL,QAASqB,EACTpB,MAAM,EACNC,GAAI2B,iBAGRP,EAAgB,KAIiBQ,CAAaJ,KAC5C,kBAACnC,EAAD,CACEwC,MAAOV,EACPW,WAAS,EACTC,KAAK,OACLC,YAAY,wBACZC,SAAU,SAACT,GAAD,OAAWJ,EAAgBI,EAAMU,OAAOL,UAEpD,kBAACtC,EAAD,wB,q+CCjCN,IAAM4C,EAAYhD,IAAOiD,IAAV,KAOTC,EAAOlD,IAAOmD,GAAV,KAON,qBAAGC,QAEHC,YADM,QAMJC,EAAatD,IAAOK,OAAV,KASZ,qBAAGO,MAEHyC,YADI,QAYFE,EAAcvD,IAAOwD,EAAV,KAKb,qBAAG5C,MAEHyC,YADI,QAMFI,EAAezD,IAAOK,OAAV,KChBHqD,EA7BE,WAAO,IAAD,EACOC,YAAY9B,GAAhCnB,EADa,EACbA,MAAOI,EADM,EACNA,SACToB,EAAWC,cACjB,OACE,kBAACa,EAAD,KACGtC,EAAMkD,KAAI,SAACnC,GAAD,OACT,kBAACyB,EAAD,CAAMW,IAAKpC,EAAKZ,GAAIuC,OAAQtC,GAAYW,EAAKb,MAC3C,kBAAC0C,EAAD,CACE1C,KAAMa,EAAKb,KACXkD,QAAS,WACP5B,EAASZ,EAAeG,EAAKZ,OAHjC,UAQA,kBAAC0C,EAAD,CAAa3C,KAAMa,EAAKb,MAAOa,EAAKd,SACpC,kBAAC8C,EAAD,CACEK,QAAS,WACP5B,EAASR,EAAWD,EAAKZ,OAF7B,gB,6cC1BV,IAAMkD,EAAmB/D,IAAOiD,IAAV,KAGhB7C,EAASJ,IAAOK,OAAV,KC6BG2D,EA7BC,WAAO,IAAD,EACQL,YAAY9B,GAAhCnB,EADY,EACZA,MAAOI,EADK,EACLA,SACToB,EAAWC,cACjB,OAAqB,IAAjBzB,EAAMuD,OACD,KAGL,kBAACF,EAAD,KACE,kBAAC,EAAD,CACED,QAAS,WACP5B,EAASf,OAGVL,EAAW,4BAAoB,wBAGlC,kBAAC,EAAD,CACEoD,SAAUxD,EAAMyD,OAAM,SAAC1C,GAAD,OAAUA,EAAKb,QACrCkD,QAAS,WACP5B,EAASb,OAHb,2B,8dCnBR,IAAM+C,EAAcpE,IAAOiD,IAAV,KAIXoB,EAAUrE,IAAOiD,IAAV,KASPqB,EAAYtE,IAAOuE,GAAV,KCDAC,GAXD,SAACC,GAAD,OACZ,kBAACL,EAAD,KACE,kBAAC,EAAD,KACE,kBAACE,EAAD,KAAYG,EAAMC,OACjBD,EAAME,oBAET,6BACCF,EAAMG,W,6FCRX,IAIeC,GAJM7E,IAAO8E,GAAV,MCKHC,GAJA,SAACN,GACd,OAAO,kBAAC,GAAD,KAAeA,EAAMG,W,kICF9B,IAMeI,GANOhF,IAAOiD,IAAV,MCKJoB,GAJC,SAACI,GACf,OAAO,kBAAC,GAAD,KAAgBA,EAAMG,WCkBhBK,OAdf,WACE,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,yBACA,kBAAC,GAAD,CAAOP,MAAM,sBACX,kBAAC,EAAD,OAEF,kBAAC,GAAD,CAAOA,MAAM,mBAAcC,mBAAoB,kBAAC,EAAD,OAC7C,kBAAC,EAAD,SCXOO,GAFH,kBAAM,kBAAC,GAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCfSC,eAAe,CAC5BC,QAAS,CACP/E,MAAOgF,KCGXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,IACf,kBAAC,GAAD,QAGJC,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7a99be0.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst StyledForm = styled.form`\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: row;\r\n  @media (max-width: 700px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\nconst StyledInput = styled.input`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  margin-right: 20px;\r\n  height: auto;\r\n  font-size: 25px;\r\n  border: 1px solid #ccc;\r\n  border-radius: none;\r\n  @media (max-width: 700px) {\r\n    margin-right: 0px;\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  letter-spacing: 0.6px;\r\n  padding: 15px 25px;\r\n  font-size: 22px;\r\n  border: none;\r\n  background-color: teal;\r\n  color: white;\r\n  transition: background-color 0.3s ease-in;\r\n  &:hover {\r\n    cursor: pointer;\r\n    background-color: rgb(11, 155, 155);\r\n  }\r\n`;\r\n\r\nexport { StyledForm, StyledInput, Button };\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: [\r\n      {\r\n        content: \"test\",\r\n        done: false,\r\n        id: 1,\r\n      },\r\n    ],\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload }) => {\r\n      tasks.push(payload);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex((task) => task.id === payload);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload }) => {\r\n      const index = tasks.findIndex((task) => task.id === payload);\r\n      tasks.splice(index, 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  setAllDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n} = tasksSlice.actions;\r\nexport const selectTasks = (state) => state.tasks;\r\nexport default tasksSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { StyledForm, StyledInput, Button } from \"./styledForm\";\r\nimport { addTask } from \"../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [inputContent, setInputContent] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (inputContent.trim() === \"\") {\r\n      return;\r\n    }\r\n    dispatch(\r\n      addTask({\r\n        content: inputContent,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n    setInputContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={(event) => onFormSubmit(event)}>\r\n      <StyledInput\r\n        value={inputContent}\r\n        autoFocus\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={(event) => setInputContent(event.target.value)}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst TasksList = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n  margin-top: 40px;\r\n  list-style-type: none;\r\n`;\r\nconst Task = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  margin: 20px 0;\r\n  padding-bottom: 20px;\r\n  border-bottom: 2px solid #ccc;\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nconst DoneButton = styled.button`\r\n  font-size: 18px;\r\n  padding: 15px;\r\n  border: none;\r\n  color: green;\r\n  background-color: green;\r\n  text-decoration: none;\r\n  transition: all 0.3s ease-in;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      color: white;\r\n    `}\r\n\r\n  &:hover {\r\n    color: rgb(19, 161, 19);\r\n    background-color: rgb(19, 161, 19);\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst TaskContent = styled.p`\r\n  font-size: 18px;\r\n  margin: 0 20px;\r\n  flex-grow: 1;\r\n\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nconst DeleteButton = styled.button`\r\n  font-size: 18px;\r\n  padding: 15px;\r\n  border: none;\r\n  color: white;\r\n  background-color: crimson;\r\n  text-decoration: none;\r\n  transition: all 0.3s ease-in;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    color: white;\r\n    background-color: rgb(148, 17, 43);\r\n  }\r\n`;\r\n\r\nexport { TasksList, Task, DoneButton, TaskContent, DeleteButton };\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleTaskDone, removeTask, selectTasks } from \"../tasksSlice\";\r\n\r\nimport {\r\n  TasksList,\r\n  Task,\r\n  DoneButton,\r\n  TaskContent,\r\n  DeleteButton,\r\n} from \"./styledTasks\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <TasksList>\r\n      {tasks.map((task) => (\r\n        <Task key={task.id} hidden={hideDone && task.done}>\r\n          <DoneButton\r\n            done={task.done}\r\n            onClick={() => {\r\n              dispatch(toggleTaskDone(task.id));\r\n            }}\r\n          >\r\n            ✔\r\n          </DoneButton>\r\n          <TaskContent done={task.done}>{task.content}</TaskContent>\r\n          <DeleteButton\r\n            onClick={() => {\r\n              dispatch(removeTask(task.id));\r\n            }}\r\n          >\r\n            ✖\r\n          </DeleteButton>\r\n        </Task>\r\n      ))}\r\n    </TasksList>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nconst ButtonsContainer = styled.div`\r\n  padding: 20px;\r\n`;\r\nconst Button = styled.button`\r\n  color: teal;\r\n  background: none;\r\n  border: none;\r\n  font-size: 18px;\r\n  transition: color 0.3s ease-in;\r\n\r\n  &:hover {\r\n    color: rgb(11, 155, 155);\r\n    cursor: pointer;\r\n  }\r\n  &:disabled {\r\n    color: #ccc;\r\n  }\r\n  @media (max-width: 700px) {\r\n    margin-top: 20px;\r\n    margin-left: 0;\r\n  }\r\n`;\r\n\r\nexport { ButtonsContainer, Button };\r\n","import React from \"react\";\r\nimport { ButtonsContainer, Button } from \"./styledButtons\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasks, toggleHideDone, setAllDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasks);\r\n  const dispatch = useDispatch();\r\n  if (tasks.length === 0) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <ButtonsContainer>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(toggleHideDone());\r\n          }}\r\n        >\r\n          {hideDone ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n        </Button>\r\n\r\n        <Button\r\n          disabled={tasks.every((task) => task.done)}\r\n          onClick={() => {\r\n            dispatch(setAllDone());\r\n          }}\r\n        >\r\n          Ukończ wszystkie\r\n        </Button>\r\n      </ButtonsContainer>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledGroup = styled.div`\r\n  margin-top: 20px;\r\n  background-color: white;\r\n`;\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  @media (max-width: 700px) {\r\n    flex-direction: column;\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\nconst SubHeader = styled.h2`\r\n  padding: 20px;\r\n  font-size: 32px;\r\n  margin: 0;\r\n`;\r\n\r\nexport { StyledGroup, Wrapper, SubHeader };\r\n","import React from \"react\";\r\nimport { StyledGroup, Wrapper, SubHeader } from \"./styledGroup.js\";\r\n\r\nconst Group = (props) => (\r\n  <StyledGroup>\r\n    <Wrapper>\r\n      <SubHeader>{props.title}</SubHeader>\r\n      {props.additionalElements}\r\n    </Wrapper>\r\n    <hr></hr>\r\n    {props.children}\r\n  </StyledGroup>\r\n);\r\n\r\nexport default Group;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledHeader = styled.h1`\r\n  font-size: 52px;\r\n`;\r\n\r\nexport default StyledHeader;\r\n","import React from \"react\";\r\nimport StyledHeader from \"./styledHeader\";\r\n\r\nconst Header = (props) => {\r\n  return <StyledHeader>{props.children}</StyledHeader>;\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nconst StyledWrapper = styled.div`\r\n  width: 1000px;\r\n  max-width: 90vw;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport default StyledWrapper;\r\n","import React from \"react\";\r\nimport StyledWrapper from \"./styledWrapper\";\r\n\r\nconst Wrapper = (props) => {\r\n  return <StyledWrapper>{props.children}</StyledWrapper>;\r\n};\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TaskList/index.js\";\r\nimport Buttons from \"./Buttons\";\r\nimport Group from \"../../common/Group/index\";\r\nimport Header from \"../../common/Header/index\";\r\nimport Wrapper from \"../../common/Wrapper/index\";\r\n\r\nfunction Tasks() {\r\n  return (\r\n    <Wrapper>\r\n      <Header>Lista zadań</Header>\r\n      <Group title=\"Dodaj nowe zadanie\">\r\n        <Form />\r\n      </Group>\r\n      <Group title=\"Lista zadań\" additionalElements={<Buttons />}>\r\n        <TaskList />\r\n      </Group>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\";\r\n\r\nconst App = () => <Tasks />;\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}