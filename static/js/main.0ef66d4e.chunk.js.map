{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Group/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","className","autoFocus","type","placeholder","Tasks","props","tasks","map","task","doneTasksHidden","done","content","Buttons","length","find","Group","class","title","additionalElements","children","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAUeA,G,UAPF,kBACT,0BAAMC,UAAU,QACZ,2BAAOC,WAAS,EAACD,UAAU,cAAcE,KAAK,OAAOC,YAAY,0BACjE,4BAAQH,UAAU,uBAAlB,oBCWOI,G,MAbD,SAACC,GAAD,OACV,wBAAIL,UAAU,SACTK,EAAMC,MAAMC,KAAM,SAAAC,GAAI,OACnB,wBAAIR,UAAS,cAASK,EAAMI,iBAAmBD,EAAKE,KAAO,gBAAkB,IAAhE,OAAqEF,EAAKE,KAAO,cAAgB,KAC1G,4BAAQV,UAAS,oBAAjB,UACA,uBAAGA,UAAS,iBAAoBQ,EAAKG,SACrC,4BAAQX,UAAS,sBAAjB,iBCUDY,G,MAjBC,SAACP,GACb,OAA0B,IAAvBA,EAAMC,MAAMO,OACR,KAGA,yBAAKb,UAAS,WACjB,4BAAQA,UAAU,2BACjBK,EAAMI,gBAAkB,4BAAoB,wBAE7C,4CAAYJ,EAAMC,MAAMQ,MAAK,SAACN,GAAD,OAAYA,EAAKE,KAAY,WAAL,MAArD,CAAwEV,UAAU,4BAAlF,4BCKOe,G,MAdD,SAACV,GAAD,OACF,yBAAKL,UAAU,SACX,yBAAKgB,MAAM,kBACP,wBAAIhB,UAAU,oBAAoBK,EAAMY,OACvCZ,EAAMa,oBAGX,6BAECb,EAAMc,YCLjBb,G,MAAQ,CACV,CACIc,GAAG,EACHT,QAAQ,0BACRD,MAAK,GAET,CACIU,GAAG,EACHT,QAAQ,0BACRD,MAAK,KAsBEW,MAjBf,WACI,OACI,0BAAMrB,UAAU,QACZ,wBAAIA,UAAU,gBAAd,oBAEA,kBAAC,EAAD,CAAOiB,MAAM,sBACT,kBAAC,EAAD,OAGJ,kBAAC,EAAD,CAAOA,MAAM,mBAAcC,mBAAoB,kBAAC,EAAD,CAASZ,MAAOA,EAAOG,iBAX1D,KAYR,kBAAC,EAAD,CAAOH,MAAOA,EAAOG,iBAZb,OCPJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ef66d4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Form = () => (\r\n    <form className=\"form\">\r\n        <input autoFocus className=\"form__input\" type=\"text\" placeholder=\"Co jest do zrobienia?\"/>\r\n        <button className=\"form__newTaskButton\">Dodaj zadanie</button>\r\n    </form>\r\n)\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n\r\nconst Tasks = (props) => ( \r\n    <ul className=\"tasks\">\r\n        {props.tasks.map(( task => \r\n            <li className={`task${props.doneTasksHidden && task.done ? \" task--hidden\" : \"\"}${task.done ? \" task--done\" : \"\"}`}>\r\n                <button className={`task__doneButton`}>✔</button>\r\n                <p className={`task__content`}>{task.content}</p>\r\n                <button className={`task__deleteButton`}>✖</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Buttons = (props) => {\r\n    if(props.tasks.length === 0){\r\n    return null;\r\n    }\r\n    else{\r\n    return <div className={`buttons`}>\r\n        <button className=\"buttons__functionButton\">\r\n        {props.doneTasksHidden ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n        </button>\r\n        <button {...props.tasks.find((task) => (!task.done ? \"\" : \"disabled\"))} className=\"buttons__functionButton\">\r\n        Ukończ wszystkie\r\n        </button>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Group = (props) => (\r\n            <div className=\"group\">\r\n                <div class=\"group__wrapper\">\r\n                    <h2 className=\"group__subHeader\">{props.title}</h2>\r\n                    {props.additionalElements}\r\n                </div>\r\n\r\n                <hr></hr>\r\n\r\n                {props.children}\r\n\r\n            </div>\r\n)\r\n\r\nexport default Group;","import React from 'react';\nimport Form from \"./Form\";\nimport Tasks from './Tasks';\nimport Buttons from './Buttons';\nimport Group from './Group';\nimport './style.css'\n\nconst tasks = [\n    {\n        id:1,\n        content:\"zjeść ciastko\",\n        done:true,\n    },\n    {\n        id:2,\n        content:\"wypić herbatę\",\n        done:false,\n    }\n]\nconst doneTasksHidden = false;\n\nfunction App() {\n    return (\n        <main className=\"main\">\n            <h1 className=\"main__header\">Lista zadań</h1>\n            \n            <Group title=\"Dodaj nowe zadanie\">\n                <Form/>\n            </Group>\n\n            <Group title=\"Lista zadań\" additionalElements={<Buttons tasks={tasks} doneTasksHidden={doneTasksHidden}/>}>\n                <Tasks tasks={tasks} doneTasksHidden={doneTasksHidden} />\n            </Group>\n\n        </main>\n    );\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}