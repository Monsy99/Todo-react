{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Group/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","onFormSubmit","value","autoFocus","type","placeholder","onChange","target","Tasks","tasks","doneTasksHidden","toggleTaskDone","removeTask","map","task","key","id","done","onClick","content","Buttons","setDoneTasksHidden","setAllTasksDone","length","disabled","every","Group","props","title","additionalElements","children","App","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.360b2e2d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newTaskContent) {\r\n      addNewTask(newTaskContent);\r\n      setNewTaskContent(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={(event) => onFormSubmit(event)}>\r\n      <input\r\n        value={newTaskContent}\r\n        autoFocus\r\n        className=\"form__input\"\r\n        type=\"text\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n      />\r\n      <button className=\"form__newTaskButton\">Dodaj zadanie</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, doneTasksHidden, toggleTaskDone, removeTask }) => {\r\n  return (\r\n    <ul className=\"tasks\">\r\n      {tasks.map((task) => (\r\n        <li\r\n          key={task.id}\r\n          className={`task\r\n          ${doneTasksHidden && task.done ? \" task--hidden\" : \"\"}\r\n          ${task.done ? \" task--done\" : \"\"}`}\r\n        >\r\n          <button\r\n            className={`task__doneButton`}\r\n            onClick={() => toggleTaskDone(task.id)}\r\n          >\r\n            ✔\r\n          </button>\r\n          <p className={`task__content`}>{task.content}</p>\r\n          <button\r\n            className={`task__deleteButton`}\r\n            onClick={() => removeTask(task.id)}\r\n          >\r\n            ✖\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({\r\n  tasks,\r\n  setDoneTasksHidden,\r\n  doneTasksHidden,\r\n  setAllTasksDone,\r\n}) => {\r\n  if (tasks.length === 0) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <div className={`buttons`}>\r\n        <button\r\n          className=\"buttons__functionButton\"\r\n          onClick={() => setDoneTasksHidden(!doneTasksHidden)}\r\n        >\r\n          {doneTasksHidden ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n        </button>\r\n\r\n        <button\r\n          disabled={tasks.every((task) => task.done)}\r\n          className=\"buttons__functionButton\"\r\n          onClick={setAllTasksDone}\r\n        >\r\n          Ukończ wszystkie\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Buttons;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Group = (props) => (\r\n  <div className=\"group\">\r\n    <div className=\"group__wrapper\">\r\n      <h2 className=\"group__subHeader\">{props.title}</h2>\r\n      {props.additionalElements}\r\n    </div>\r\n    <hr></hr>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Group;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Group from \"./Group\";\r\nimport \"./style.css\";\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      id: 1,\r\n      content: \"zjeść ciastko\",\r\n      done: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      content: \"wypić herbatę\",\r\n      done: false,\r\n    },\r\n  ]);\r\n\r\n  const [doneTasksHidden, setDoneTasksHidden] = useState(false);\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(\r\n      tasks.map((task) => {\r\n        if (task.id === id) {\r\n          return {\r\n            ...task,\r\n            done: !task.done,\r\n          };\r\n        }\r\n        return task;\r\n      })\r\n    );\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(\r\n      // this filter function checks if the task.id matches the given id and returns\r\n      // false to filter function which removes it from tasks array\r\n      tasks.filter((task) => {\r\n        return task.id === id ? false : true;\r\n      })\r\n    );\r\n  };\r\n\r\n  const setAllTasksDone = () => {\r\n    setTasks(\r\n      tasks.map((task) => ({\r\n        ...task,\r\n        done: true,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const addNewTask = (newTaskContent) => {\r\n    setTasks([\r\n      ...tasks,\r\n      {\r\n        content: newTaskContent,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      <h1 className=\"main__header\">Lista zadań</h1>\r\n\r\n      <Group title=\"Dodaj nowe zadanie\">\r\n        <Form addNewTask={addNewTask} />\r\n      </Group>\r\n\r\n      <Group\r\n        title=\"Lista zadań\"\r\n        additionalElements={\r\n          <Buttons\r\n            tasks={tasks}\r\n            doneTasksHidden={doneTasksHidden}\r\n            setDoneTasksHidden={setDoneTasksHidden}\r\n            setAllTasksDone={setAllTasksDone}\r\n          />\r\n        }\r\n      >\r\n        <Tasks\r\n          removeTask={removeTask}\r\n          toggleTaskDone={toggleTaskDone}\r\n          tasks={tasks}\r\n          doneTasksHidden={doneTasksHidden}\r\n        />\r\n      </Group>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}